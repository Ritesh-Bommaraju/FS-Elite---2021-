/*
You are given a list of N integers List[], list contains both +ve and -ve integers.
Your task is to findout, the Highest Product possible,
Where the product is the product of all the elements of contiguous sublist sList[],
and sub list should conatin atleast 1 integer.

Input Format:
-------------
Line-1: An integer N.
Line-2: N space separated integers, List[].

Output Format:
--------------
Print an integer output, the highest product.

Sample Input-1:
---------------
4
2 3 -2 4

Sample Output-1:
----------------
6

Explanation:
------------
Product of contiguous sub list [2,3].


Sample Input-2:
---------------
3
-2 0 -3

Sample Output-2:
----------------
0

Explanation:
------------
Product of sub list [0], where [-2,-3] is not a contiguous sublist

*/


---------------------------------------


#include<bits/stdc++.h>
using namespace std;

int find_max_product(int n,vector<int> vect)
{
    int maxList[n+1];
    int minList[n+1];
    
    minList[0]=vect[0];
    maxList[0]=vect[0];
    
    for(int i=1;i<n;i++)
    {
        maxList[i]=max(max(vect[i]*maxList[i-1],vect[i]*minList[i-1]),vect[i]);
        minList[i]=min(min(vect[i]*minList[i-1],vect[i]*maxList[i-1]),vect[i]);
    }
    
    int max_number=maxList[0];
    for(int i=0;i<n;i++)
    {
        if(maxList[i]>max_number)
        {
            max_number=maxList[i];
        }
    }
    return max_number;
}


int main()
{
    int n;
    cin>>n;
    vector<int> vect;
    int number;
    for(int i=0;i<n;i++)
    {
        cin>>number;
        vect.push_back(number);
    }
    int result=find_max_product(n,vect);
    cout<<result<<endl;
    
    return 0;
}

==========================================================